name: Deploy Supabase Panel to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-panel'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 600s
        command_timeout: 600s
        script: |
          # Fun√ß√£o de log
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }
          
          # ====================================
          # ETAPA 1: PREPARAR AMBIENTE
          # ====================================
          log "üöÄ INICIANDO DEPLOY SUPABASE PANEL - ETAPA 1: Preparando ambiente..."
          
          # Configura√ß√µes
          APP_DIR="${{ env.APP_DIR }}"
          REPO_URL="https://github.com/${{ github.repository }}.git"
          
          # Parar containers existentes ANTES de qualquer opera√ß√£o
          log "‚èπÔ∏è Parando containers e servi√ßos existentes..."
          
          # Parar containers Docker existentes
          docker stop $(docker ps -aq) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          
          # Parar processos Node.js existentes
          pkill -f "node.*server.js" || true
          pkill -f "npm.*start" || true
          pkill -f "npm.*dev" || true
          
          # Criar diret√≥rio e navegar
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # ====================================
          # ETAPA 2: BAIXAR/ATUALIZAR C√ìDIGO
          # ====================================
          log "üöÄ ETAPA 2: Baixando c√≥digo do reposit√≥rio..."
          
          # Limpar diret√≥rio
          rm -rf * .git 2>/dev/null || true
          
          # Clonar reposit√≥rio
          log "üì• Clonando reposit√≥rio..."
          git clone $REPO_URL . || {
            log "‚ùå Clone falhou, usando download direto..."
            curl -L https://github.com/${{ github.repository }}/archive/main.tar.gz | tar xz --strip-components=1
          }
          
          # Verificar se baixou corretamente
          if [ ! -f "panel/backend/server.js" ]; then
            log "‚ùå Estrutura do projeto n√£o encontrada!"
            ls -la
            exit 1
          fi
          log "‚úÖ C√≥digo baixado com sucesso"
          
          # ====================================
          # ETAPA 3: INSTALAR DEPEND√äNCIAS DO SISTEMA
          # ====================================
          log "üöÄ ETAPA 3: Instalando depend√™ncias do sistema..."
          
          # Atualizar sistema
          apt-get update -qq
          
          # Instalar Node.js 18 LTS se necess√°rio
          if ! command -v node >/dev/null 2>&1 || [ "$(node -v | cut -d'v' -f2 | cut -d'.' -f1)" -lt "18" ]; then
            log "üì¶ Instalando Node.js 18 LTS..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
          else
            log "‚úÖ Node.js j√° instalado: $(node -v)"
          fi
          
          # Instalar Docker se necess√°rio
          if ! command -v docker >/dev/null 2>&1; then
            log "üì¶ Instalando Docker..."
            curl -fsSL https://get.docker.com | sh
            systemctl start docker
            systemctl enable docker
          else
            log "‚úÖ Docker j√° instalado: $(docker --version)"
          fi
          
          # Verificar Docker Compose
          if ! docker compose version >/dev/null 2>&1; then
            log "üì¶ Instalando Docker Compose..."
            apt-get install -y docker-compose-plugin
          else
            log "‚úÖ Docker Compose j√° instalado: $(docker compose version)"
          fi
          
          # Instalar PM2 para gerenciar processos Node.js
          if ! command -v pm2 >/dev/null 2>&1; then
            log "üì¶ Instalando PM2..."
            npm install -g pm2
          else
            log "‚úÖ PM2 j√° instalado: $(pm2 -v)"
          fi
          
          # ====================================
          # ETAPA 4: CONFIGURAR AMBIENTE
          # ====================================
          log "üöÄ ETAPA 4: Configurando ambiente..."
          
          # Criar diret√≥rios necess√°rios
          mkdir -p panel/data
          mkdir -p docker/instances
          
          # Definir IP da VPS nas configura√ß√µes
          VPS_IP="${{ env.VPS_HOST }}"
          
          # Criar arquivo de configura√ß√£o do ambiente
          cat > panel/.env << EOF
          NODE_ENV=production
          PORT=5000
          VPS_IP=$VPS_IP
          DOCKER_PATH=$APP_DIR/docker
          DATA_PATH=$APP_DIR/panel/data
          EOF
          
          # ====================================
          # ETAPA 5: INSTALAR DEPEND√äNCIAS DO PROJETO
          # ====================================
          log "üöÄ ETAPA 5: Instalando depend√™ncias do projeto..."
          
          # Backend dependencies
          cd $APP_DIR/panel/backend
          log "üì¶ Instalando depend√™ncias do backend..."
          npm install --production
          
          # Frontend dependencies e build
          cd $APP_DIR/panel/frontend
          log "üì¶ Instalando depend√™ncias do frontend..."
          npm install
          
          log "üèóÔ∏è Fazendo build do frontend..."
          npm run build
          
          # ====================================
          # ETAPA 6: CONFIGURAR NGINX
          # ====================================
          log "üöÄ ETAPA 6: Configurando Nginx..."
          
          # Instalar Nginx se necess√°rio
          if ! command -v nginx >/dev/null 2>&1; then
            log "üì¶ Instalando Nginx..."
            apt-get install -y nginx
          fi
          
          # Configurar Nginx para servir a aplica√ß√£o
          cat > /etc/nginx/sites-available/supabase-panel << 'EOF'
          server {
              listen 80;
              server_name _;
              
              # Servir arquivos est√°ticos do frontend
              location / {
                  root /opt/supabase-panel/panel/frontend/dist;
                  try_files $uri $uri/ /index.html;
              }
              
              # Proxy para API do backend
              location /api/ {
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          # Ativar site
          ln -sf /etc/nginx/sites-available/supabase-panel /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Testar configura√ß√£o do Nginx
          nginx -t || {
            log "‚ùå Erro na configura√ß√£o do Nginx"
            exit 1
          }
          
          # ====================================
          # ETAPA 7: INICIAR SERVI√áOS
          # ====================================
          log "üöÄ ETAPA 7: Iniciando servi√ßos..."
          
          cd $APP_DIR
          
          # Parar PM2 existente
          pm2 delete all 2>/dev/null || true
          
          # Iniciar backend com PM2
          cd panel/backend
          pm2 start server.js --name "supabase-panel-backend" --env production
          
          # Reiniciar Nginx
          systemctl restart nginx
          systemctl enable nginx
          
          # ====================================
          # ETAPA 8: VERIFICA√á√ïES DE SA√öDE
          # ====================================
          log "üöÄ ETAPA 8: Verificando deployment..."
          
          # Aguardar servi√ßos iniciarem
          log "‚è≥ Aguardando servi√ßos iniciarem..."
          sleep 10
          
          # Verificar status dos servi√ßos
          log "üìã Status dos servi√ßos:"
          
          FAILED_SERVICES=""
          
          # Verificar PM2
          if pm2 list | grep -q "supabase-panel-backend.*online"; then
            log "‚úÖ Backend (PM2): OK"
          else
            log "‚ùå Backend (PM2): FALHOU"
            FAILED_SERVICES="$FAILED_SERVICES backend"
            pm2 logs supabase-panel-backend --lines 10
          fi
          
          # Verificar Nginx
          if systemctl is-active --quiet nginx; then
            log "‚úÖ Nginx: OK"
          else
            log "‚ùå Nginx: FALHOU"
            FAILED_SERVICES="$FAILED_SERVICES nginx"
            systemctl status nginx
          fi
          
          # Verificar Docker
          if systemctl is-active --quiet docker; then
            log "‚úÖ Docker: OK"
          else
            log "‚ùå Docker: FALHOU"
            FAILED_SERVICES="$FAILED_SERVICES docker"
          fi
          
          # Health checks HTTP
          sleep 5
          
          # Testar frontend
          if curl -f -s http://localhost/ >/dev/null 2>&1; then
            log "‚úÖ Frontend (HTTP): OK"
          else
            log "‚ùå Frontend (HTTP): FALHOU"
            FAILED_SERVICES="$FAILED_SERVICES frontend"
          fi
          
          # Testar API backend
          if curl -f -s http://localhost/api/info >/dev/null 2>&1; then
            log "‚úÖ Backend API: OK"
          else
            log "‚ùå Backend API: FALHOU"
            FAILED_SERVICES="$FAILED_SERVICES api"
          fi
          
          # ====================================
          # ETAPA 9: CONFIGURAR AUTO-START
          # ====================================
          log "üöÄ ETAPA 9: Configurando auto-start..."
          
          # Salvar configura√ß√£o do PM2 para auto-start
          pm2 save
          pm2 startup systemd -u root --hp /root
          
          # ====================================
          # ETAPA 10: RESULTADO FINAL
          # ====================================
          if [ -n "$FAILED_SERVICES" ]; then
            log "‚ùå DEPLOY COM PROBLEMAS. Servi√ßos com falha:$FAILED_SERVICES"
            log "üìã Logs dos servi√ßos:"
            pm2 logs --lines 20
            systemctl status nginx --no-pager
            exit 1
          else
            log "üéâ DEPLOY DO SUPABASE PANEL CONCLU√çDO COM SUCESSO!"
            log "üåê Aplica√ß√£o dispon√≠vel em:"
            log "   - http://${{ env.VPS_HOST }} (Supabase Panel - Interface Principal)"
            log "   - http://${{ env.VPS_HOST }}/api/info (Backend API)"
            log ""
            log "üìä Resumo dos servi√ßos ativos:"
            pm2 list
            log ""
            log "üê≥ Docker pronto para criar inst√¢ncias Supabase"
            log "üí° Use o painel web para criar e gerenciar inst√¢ncias"
            log ""
            log "üîß Comandos √∫teis na VPS:"
            log "   - pm2 logs supabase-panel-backend  # Ver logs do backend"
            log "   - pm2 restart supabase-panel-backend  # Reiniciar backend"
            log "   - systemctl status nginx  # Status do Nginx"
            log "   - docker ps  # Ver inst√¢ncias Supabase ativas"
          fi