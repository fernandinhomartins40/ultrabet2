name: Deploy Supabase Panel to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-panel'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 600s
        command_timeout: 600s
        script: |
          set -e  # Parar script se houver erro
          
          # Fun√ß√£o de log
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }
          
          # Fun√ß√£o para aguardar servi√ßo
          wait_for_service() {
            local service=$1
            local max_wait=${2:-30}
            local count=0
            
            log "‚è≥ Aguardando $service iniciar..."
            while [ $count -lt $max_wait ]; do
              if systemctl is-active --quiet $service 2>/dev/null; then
                log "‚úÖ $service ativo"
                return 0
              fi
              sleep 2
              count=$((count + 1))
            done
            log "‚ùå $service n√£o iniciou ap√≥s ${max_wait}s"
            return 1
          }
          
          # ====================================
          # ETAPA 1: PREPARAR AMBIENTE
          # ====================================
          log "üöÄ INICIANDO DEPLOY SUPABASE PANEL - ETAPA 1: Preparando ambiente..."
          
          # Configura√ß√µes
          APP_DIR="${{ env.APP_DIR }}"
          REPO_URL="https://github.com/${{ github.repository }}.git"
          VPS_IP="${{ env.VPS_HOST }}"
          
          # Parar servi√ßos existentes de forma segura
          log "‚èπÔ∏è Parando servi√ßos existentes..."
          
          # Parar PM2 primeiro
          pm2 delete all 2>/dev/null || true
          pm2 kill 2>/dev/null || true
          
          # Parar Nginx temporariamente
          systemctl stop nginx 2>/dev/null || true
          
          # Parar containers Docker
          docker stop $(docker ps -aq) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          
          # Limpar processos Node.js √≥rf√£os
          pkill -f "node.*server.js" 2>/dev/null || true
          pkill -f "npm.*start" 2>/dev/null || true
          
          # Criar e limpar diret√≥rio
          mkdir -p $APP_DIR
          cd $APP_DIR
          rm -rf * .git .env 2>/dev/null || true
          
          # ====================================
          # ETAPA 2: BAIXAR C√ìDIGO
          # ====================================
          log "üöÄ ETAPA 2: Baixando c√≥digo..."
          
          # Tentar git clone primeiro
          if git clone $REPO_URL . 2>/dev/null; then
            log "‚úÖ Reposit√≥rio clonado via git"
          else
            log "üì• Usando download direto..."
            curl -L "https://github.com/${{ github.repository }}/archive/main.tar.gz" | tar xz --strip-components=1
          fi
          
          # Verificar estrutura
          if [ ! -f "panel/backend/server.js" ] || [ ! -f "panel/frontend/package.json" ]; then
            log "‚ùå Estrutura incorreta. Arquivos encontrados:"
            find . -name "*.js" -o -name "*.json" | head -10
            exit 1
          fi
          log "‚úÖ C√≥digo verificado"
          
          # ====================================
          # ETAPA 3: INSTALAR DEPEND√äNCIAS
          # ====================================
          log "üöÄ ETAPA 3: Instalando depend√™ncias..."
          
          # Atualizar sistema sem perguntas
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -qq
          apt-get install -y curl wget gnupg lsb-release
          
          # Node.js 18 LTS
          if ! node --version 2>/dev/null | grep -q "v18"; then
            log "üì¶ Instalando Node.js 18..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
            log "‚úÖ Node.js instalado: $(node --version)"
          else
            log "‚úÖ Node.js OK: $(node --version)"
          fi
          
          # Docker
          if ! command -v docker >/dev/null 2>&1; then
            log "üì¶ Instalando Docker..."
            curl -fsSL https://get.docker.com | sh
            usermod -aG docker root
          fi
          
          # Iniciar Docker
          systemctl start docker
          systemctl enable docker
          wait_for_service docker 20
          
          # Docker Compose
          if ! docker compose version >/dev/null 2>&1; then
            log "üì¶ Instalando Docker Compose..."
            apt-get install -y docker-compose-plugin
          fi
          log "‚úÖ Docker OK: $(docker --version)"
          
          # PM2
          if ! command -v pm2 >/dev/null 2>&1; then
            log "üì¶ Instalando PM2..."
            npm install -g pm2@latest
          fi
          log "‚úÖ PM2 OK: $(pm2 --version)"
          
          # Nginx
          if ! command -v nginx >/dev/null 2>&1; then
            log "üì¶ Instalando Nginx..."
            apt-get install -y nginx
          fi
          
          # ====================================
          # ETAPA 4: CONFIGURAR PROJETO
          # ====================================
          log "üöÄ ETAPA 4: Configurando projeto..."
          
          # Criar estrutura de diret√≥rios
          mkdir -p panel/data
          mkdir -p docker/instances
          chmod 755 panel/data docker/instances
          
          # Arquivo de ambiente para backend
          cat > panel/backend/.env << EOF
NODE_ENV=production
PORT=5000
VPS_IP=$VPS_IP
DOCKER_PATH=$APP_DIR/docker
DATA_PATH=$APP_DIR/panel/data
EOF
          
          # ====================================
          # ETAPA 5: INSTALAR DEPEND√äNCIAS NODE
          # ====================================
          log "üöÄ ETAPA 5: Instalando depend√™ncias Node.js..."
          
          # Backend
          cd $APP_DIR/panel/backend
          log "üì¶ Backend dependencies..."
          npm ci --only=production --silent
          
          # Frontend
          cd $APP_DIR/panel/frontend
          log "üì¶ Frontend dependencies..."
          npm ci --silent
          
          # Build frontend
          log "üèóÔ∏è Building frontend..."
          npm run build
          
          # Verificar build
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            log "‚ùå Build do frontend falhou"
            exit 1
          fi
          log "‚úÖ Frontend buildado"
          
          # ====================================
          # ETAPA 6: CONFIGURAR NGINX
          # ====================================
          log "üöÄ ETAPA 6: Configurando Nginx..."
          
          # Remover config padr√£o
          rm -f /etc/nginx/sites-enabled/default
          
          # Nova configura√ß√£o
          cat > /etc/nginx/sites-available/supabase-panel << EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    root $APP_DIR/panel/frontend/dist;
    index index.html;
    
    # Logs
    access_log /var/log/nginx/supabase-panel.access.log;
    error_log /var/log/nginx/supabase-panel.error.log;
    
    # Frontend - servir arquivos est√°ticos
    location / {
        try_files \$uri \$uri/ /index.html;
        add_header Cache-Control "public, max-age=3600";
    }
    
    # API - proxy para backend
    location /api/ {
        proxy_pass http://127.0.0.1:5000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF
          
          # Ativar site
          ln -sf /etc/nginx/sites-available/supabase-panel /etc/nginx/sites-enabled/
          
          # Testar configura√ß√£o
          if ! nginx -t; then
            log "‚ùå Configura√ß√£o Nginx inv√°lida"
            cat /etc/nginx/sites-available/supabase-panel
            exit 1
          fi
          log "‚úÖ Nginx configurado"
          
          # ====================================
          # ETAPA 7: INICIAR SERVI√áOS
          # ====================================
          log "üöÄ ETAPA 7: Iniciando servi√ßos..."
          
          # Iniciar backend
          cd $APP_DIR/panel/backend
          log "üöÄ Iniciando backend..."
          
          # Matar processos PM2 antigos
          pm2 kill 2>/dev/null || true
          sleep 2
          
          # Iniciar novo processo
          NODE_ENV=production pm2 start server.js \
            --name "supabase-panel-backend" \
            --time \
            --log-date-format "YYYY-MM-DD HH:mm:ss Z" \
            --max-memory-restart 500M
          
          # Aguardar backend
          sleep 5
          
          # Verificar se backend est√° rodando
          if ! pm2 describe supabase-panel-backend | grep -q "online"; then
            log "‚ùå Backend falhou ao iniciar"
            pm2 logs supabase-panel-backend --lines 20
            exit 1
          fi
          log "‚úÖ Backend iniciado"
          
          # Iniciar Nginx
          log "üåê Iniciando Nginx..."
          systemctl start nginx
          systemctl enable nginx
          wait_for_service nginx 15
          
          # ====================================
          # ETAPA 8: HEALTH CHECKS DETALHADOS
          # ====================================
          log "üöÄ ETAPA 8: Verificando servi√ßos..."
          
          sleep 10  # Aguardar estabiliza√ß√£o
          
          FAILED_SERVICES=""
          
          # 1. Verificar PM2
          log "üîç Testando PM2..."
          if pm2 describe supabase-panel-backend | grep -q "online"; then
            log "‚úÖ PM2 Backend: ONLINE"
          else
            log "‚ùå PM2 Backend: OFFLINE"
            FAILED_SERVICES="$FAILED_SERVICES backend"
            pm2 logs supabase-panel-backend --lines 10
          fi
          
          # 2. Verificar Nginx
          log "üîç Testando Nginx..."
          if systemctl is-active --quiet nginx; then
            log "‚úÖ Nginx: ATIVO"
          else
            log "‚ùå Nginx: INATIVO"
            FAILED_SERVICES="$FAILED_SERVICES nginx"
            systemctl status nginx --no-pager
          fi
          
          # 3. Verificar Docker
          log "üîç Testando Docker..."
          if systemctl is-active --quiet docker; then
            log "‚úÖ Docker: ATIVO"
          else
            log "‚ùå Docker: INATIVO"
            FAILED_SERVICES="$FAILED_SERVICES docker"
          fi
          
          # 4. Testar Frontend HTTP
          log "üîç Testando Frontend..."
          for i in {1..5}; do
            if curl -f -s -m 5 http://localhost/ | grep -q "Supabase" 2>/dev/null; then
              log "‚úÖ Frontend: RESPONDENDO"
              break
            elif [ $i -eq 5 ]; then
              log "‚ùå Frontend: N√ÉO RESPONDE"
              FAILED_SERVICES="$FAILED_SERVICES frontend"
              curl -v http://localhost/ || true
            else
              log "‚è≥ Frontend tentativa $i/5..."
              sleep 3
            fi
          done
          
          # 5. Testar API Backend
          log "üîç Testando API..."
          for i in {1..5}; do
            if curl -f -s -m 5 http://localhost:5000/api/info | grep -q "version" 2>/dev/null; then
              log "‚úÖ API Direta: RESPONDENDO"
              break
            elif [ $i -eq 5 ]; then
              log "‚ùå API Direta: N√ÉO RESPONDE"
              FAILED_SERVICES="$FAILED_SERVICES api-direct"
            else
              log "‚è≥ API tentativa $i/5..."
              sleep 3
            fi
          done
          
          # 6. Testar API via Nginx
          log "üîç Testando API via Nginx..."
          for i in {1..5}; do
            if curl -f -s -m 5 http://localhost/api/info | grep -q "version" 2>/dev/null; then
              log "‚úÖ API via Nginx: RESPONDENDO"
              break
            elif [ $i -eq 5 ]; then
              log "‚ùå API via Nginx: N√ÉO RESPONDE"
              FAILED_SERVICES="$FAILED_SERVICES api"
            else
              log "‚è≥ API Nginx tentativa $i/5..."
              sleep 3
            fi
          done
          
          # ====================================
          # ETAPA 9: AUTO-START
          # ====================================
          log "üöÄ ETAPA 9: Configurando auto-start..."
          
          # PM2 startup
          pm2 save
          env PATH=$PATH:/usr/bin pm2 startup systemd -u root --hp /root --silent
          
          # ====================================
          # ETAPA 10: RESULTADO
          # ====================================
          log "üìä Status final dos servi√ßos:"
          echo "PM2: $(pm2 describe supabase-panel-backend | grep -o 'status.*' | head -1)"
          echo "Nginx: $(systemctl is-active nginx)"
          echo "Docker: $(systemctl is-active docker)"
          
          if [ -n "$FAILED_SERVICES" ]; then
            log "‚ùå DEPLOY COM PROBLEMAS. Servi√ßos com falha:$FAILED_SERVICES"
            log ""
            log "üîß Informa√ß√µes de debug:"
            log "PM2 Logs:"
            pm2 logs supabase-panel-backend --lines 15 || true
            log "Nginx Status:"
            systemctl status nginx --no-pager || true
            log "Nginx Logs:"
            tail -20 /var/log/nginx/error.log || true
            log "Portas em uso:"
            netstat -tlnp | grep ":80\|:5000" || true
            exit 1
          else
            log "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
            log ""
            log "üåê Aplica√ß√£o dispon√≠vel:"
            log "   üì± Painel: http://$VPS_IP/"
            log "   üîß API: http://$VPS_IP/api/info"
            log ""
            log "üìä Servi√ßos ativos:"
            pm2 list
            log ""
            log "üê≥ Docker pronto para inst√¢ncias Supabase"
            log "üéØ Use o painel para criar e gerenciar inst√¢ncias"
          fi